{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-kp"
		},
		"mentoring_akv_ls_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-kp.vault.azure.net/"
		},
		"mentoring_azure_sql_server_DataMart_ls_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "azure-mentoring-kp.database.windows.net"
		},
		"mentoring_azure_sql_server_DataMart_ls_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DataMart"
		},
		"mentoring_azure_sql_server_DataMart_ls_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "kseniia_in_georgia"
		},
		"mentoring_azure_sql_server_movies_ls_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "azure-mentoring-kp.database.windows.net"
		},
		"mentoring_azure_sql_server_movies_ls_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "movies"
		},
		"mentoring_azure_sql_server_movies_ls_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "kseniia_in_georgia"
		},
		"mentoring_blob_au_ls_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "sas-blob-au-url"
		},
		"mentoring_blob_ls_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "sas-blob-url"
		},
		"mentoring_blob_online_ls_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "sas-blob-online-url"
		},
		"mentoring_datalake_ls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalakekp.dfs.core.windows.net"
		},
		"mentoring_sql_server_ls_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "EPGEBATW0028\\SQLSERVERKSENIIA"
		},
		"mentoring_sql_server_ls_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "CinemaTickets"
		},
		"mentoring_sql_server_ls_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ArchiveProcessedFiles_RawMovies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Archive all files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataLake_RawMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataLake_RawMoviesArchive",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete files in source",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive all files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DataLake_RawMovies",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": "*.csv",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-02T14:35:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataLake_RawMovies')]",
				"[concat(variables('factoryId'), '/datasets/DataLake_RawMoviesArchive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArchiveProcessedFiles_RawOnline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 7",
				"activities": [
					{
						"name": "ArchiveProcessedFilesInLake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "online",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DataLake_RawOnline",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataLake_RawOnlineArchive",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "EmptyLakeOnlineFolder",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ArchiveProcessedFilesInLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DataLake_RawOnline",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": "*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-02T14:35:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataLake_RawOnline')]",
				"[concat(variables('factoryId'), '/datasets/DataLake_RawOnlineArchive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromBlobAUSToLake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "BlobAUS_Ratings",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataLake_RawRatings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-11T19:50:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BlobAUS_Ratings')]",
				"[concat(variables('factoryId'), '/datasets/DataLake_RawRatings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromBlobToLake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BlobForEach",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "CopyFromBlobToLake_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "mentoring_datalake_ls",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "BlobForEach",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataLakeForEach",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat(replace(item().name, '.csv', ''), '_', formatDateTime(utcnow(), 'yyyyMMddHHmmss'), '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-11T19:50:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BlobForEach')]",
				"[concat(variables('factoryId'), '/datasets/DataLakeForEach')]",
				"[concat(variables('factoryId'), '/linkedServices/mentoring_datalake_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromBlobToLake_noForEach')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFromBlobToLake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "_@{formatDateTime(utcnow(), 'yyyyMMddHHmmss')}.csv",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Blob_Movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataLake_RawMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-11T19:50:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Blob_Movies')]",
				"[concat(variables('factoryId'), '/datasets/DataLake_RawMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromLakeToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 7",
				"activities": [
					{
						"name": "CopyFromLakeToStg",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId\n",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "online",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[online_purchase]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineId']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['source_filename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "DestinationDataset_wpg",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_Movies_stg_online_purchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CopyFromLakeToStg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.storedProceduresNames",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "mentoring_azure_sql_server_movies_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"storedProceduresNames": {
						"type": "array",
						"defaultValue": [
							"[[dbo].[spPopulateOnlineService]",
							"[[dbo].[spPopulateOnlinePurchase]"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-05T19:39:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_wpg')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_stg_online_purchase')]",
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromLakeToSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 6",
				"activities": [
					{
						"name": "Copy Credits File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "credits*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.credits",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cast",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cast",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "crew",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "crew",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataLake_RawMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_Movies_stg_credits",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Movies Metadata File",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Credits File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "movies_metadata*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.movies_metadata",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "adult",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "adult",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "budget",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budget",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "homepage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "homepage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "overview",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "overview",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "popularity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "popularity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "release_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "release_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "runtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runtime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tagline",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tagline",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "video",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "video",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataLake_RawMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_Movies_stg_movies_metadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Ratings Files",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Movies Metadata File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "ratings*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.ratings",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataLake_RawMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_Movies_stg_ratings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ForEachStoredProcedure",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Copy Ratings Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.storedProceduresNames",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "mentoring_azure_sql_server_movies_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"concurrency": 3,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"storedProceduresNames": {
						"type": "array",
						"defaultValue": [
							"[[dbo].[spPopulateCast]",
							"[[dbo].[spPopulateCompany]",
							"[[dbo].[spPopulateGenre]",
							"[[dbo].[spPopulateMovieStatus]",
							"[[dbo].[spPopulateMovies]",
							"[[dbo].[spPopulatetRatings]",
							"[[dbo].[spPopulateMoviesCastMap]",
							"[[dbo].[spPopulateMoviesCompanyMap]",
							"[[dbo].[spPopulateMoviesGenreMap]"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-04T09:34:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataLake_RawMovies')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_stg_credits')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_stg_movies_metadata')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_stg_ratings')]",
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromSQLToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 6",
				"activities": [
					{
						"name": "GetLastModifiedDate",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT coalesce(MAX(LastModified), '1900.01.01 00:00:00.000Z') AS LastModified \n    FROM [metadata].[WatermarkControl] \n    WHERE ProcessName = 'CopyFromSQLToAzureSQL'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Azure_SQL_Movies_metadata_WatermarkControl",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyToAzureSQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetLastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT * \nFROM [dbo].[Tickets] \nWHERE TransactionDt > '@{variables('LastModified')}'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.cinema_tickets",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SQL_CimenaTickets_Tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_Movies_stg_cinema_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ForEachStoredProcedure",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "UpdateLastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.storedProceduresNames",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item()",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "mentoring_azure_sql_server_movies_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetLastModified",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetLastModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LastModified",
							"value": {
								"value": "@activity('GetLastModifiedDate').output.firstRow.LastModified",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UpdateLastModified",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyToAzureSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[metadata].[UpdateWatermarkCinemaTickets]",
							"storedProcedureParameters": {
								"ProcessName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "mentoring_azure_sql_server_movies_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"storedProceduresNames": {
						"type": "array",
						"defaultValue": [
							"[[dbo].[spPopulateCinema]",
							"[[dbo].[spPopulateCinemaTickets]"
						]
					}
				},
				"variables": {
					"LastModified": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-15T08:11:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_metadata_WatermarkControl')]",
				"[concat(variables('factoryId'), '/datasets/SQL_CimenaTickets_Tickets')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_stg_cinema_tickets')]",
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyJsonFromBlobToLake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 7",
				"activities": [
					{
						"name": "CopyToLake",
						"description": "",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetLastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "online//"
							},
							{
								"name": "Destination",
								"value": "raw/online/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@variables('LastModified')",
										"type": "Expression"
									},
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"path": "$['serviceName']"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"path": "$['serviceCode']"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"path": "$['movieId']"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"path": "$['userId']"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"path": "$['price']"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"path": "$['transaction']['id']"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"path": "$['transaction']['datetime']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Blob_Online",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_wpg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "GetLastModifiedDate",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT coalesce(MAX(LastModified), '1900.01.01 00:00:00.000Z') AS LastModified \n    FROM [metadata].[WatermarkControl] \n    WHERE ProcessName = 'CopyJsonFromBlobToLake'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Azure_SQL_Movies_metadata_WatermarkControl",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "SetLastModified",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetLastModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LastModified",
							"value": {
								"value": "@activity('GetLastModifiedDate').output.firstRow.LastModified\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UpdateLastModified",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyToLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[metadata].[UpdateWatermark]",
							"storedProcedureParameters": {
								"ProcessName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastModified": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "Datetime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "mentoring_azure_sql_server_movies_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"LastModified": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-15T08:11:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Blob_Online')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_wpg')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_metadata_WatermarkControl')]",
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyJsonFromBlobToLake_simplified')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_wpg",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "online//"
							},
							{
								"name": "Destination",
								"value": "raw/online/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"validateDataConsistency": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"path": "$['serviceName']"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"path": "$['serviceCode']"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"path": "$['movieId']"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"path": "$['userId']"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"path": "$['price']"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"path": "$['transaction']['id']"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"path": "$['transaction']['datetime']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Blob_Online",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_wpg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-31T21:19:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Blob_Online')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_wpg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyToDimMovie')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 8",
				"activities": [
					{
						"name": "Populate_dboDimMovie",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Populate_dboDimMovie",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tMovies": {},
									"tMovieStatus": {},
									"DimMovie": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-06T20:42:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Populate_dboDimMovie')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyToDimOnlineService')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 8",
				"activities": [
					{
						"name": "Populate_dboDimOnlineService",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Populate_dboDimOnlineService",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlineService": {},
									"DimOnlineService": {},
									"sink": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-06T21:07:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Populate_dboDimOnlineService')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyToFactOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 8",
				"activities": [
					{
						"name": "Populate_dboFactOnlinePurchase",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Populate_dboFactOnlinePurchase",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlinePurchase": {},
									"tMovies": {},
									"DimMovie": {},
									"DimOnlineService": {},
									"tOnlineService": {},
									"sink": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-09T12:17:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Populate_dboFactOnlinePurchase')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyToFactOnlinePurchaseANDMS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 8",
				"activities": [
					{
						"name": "Populate_dboFactOnlinePurchaseANDMonthly",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Populate_dboFactOnlinePurchaseANDMonthly",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlinePurchase": {},
									"tMovies": {},
									"DimMovie": {},
									"DimOnlineService": {},
									"tOnlineService": {},
									"FactOnlinePurchase": {},
									"FactOnlinePurchaseMonthlySnapshot": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "Copy tMovie table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM [stg].[tMovies]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Azure_SQL_Movies_dbo_tMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_DataMart_stg_tMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy tOnlineService table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy tMovie table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM [stg].[tOnlineService]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Azure_SQL_Movies_dbo_tOnlineService",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_DataMart_stg_tOnlineService",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy tOnlinePurchase table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy tOnlineService table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[tOnlinePurchase]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Azure_SQL_Movies_dbo_tOnlinePurchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_DataMart_stg_tOnlinePurchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "PopulateFactOnlinePurchase",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy tOnlinePurchase table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateFactOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "mentoring_azure_sql_server_DataMart_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PopulateFactOnlinePurchase_MonthlySnapshot",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PopulateFactOnlinePurchase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateFactOnlinePurchase_MonthlySnapshot]"
						},
						"linkedServiceName": {
							"referenceName": "mentoring_azure_sql_server_DataMart_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-10T19:17:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Populate_dboFactOnlinePurchaseANDMonthly')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_stg_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_stg_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_stg_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_DataMart_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyToFactOnlinePurchase_MonthlySnapshot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 8",
				"activities": [
					{
						"name": "Populate_dboFactOnlinePurchase_MonthlySnapshot",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Populate_dboFactOnlinePurchase_MonthlySnapshot",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlinePurchase": {},
									"DimOnlineService": {},
									"tOnlineService": {},
									"sink": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-09T12:31:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Populate_dboFactOnlinePurchase_MonthlySnapshot')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LowCostPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 10",
				"activities": [
					{
						"name": "FailActivity",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "'FailMessageIsHere'",
							"errorCode": "777"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-24T13:50:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MasterForCopyDataFromBlobToSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFromBlobToLake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyFromBlobToLake_noForEach",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CopyFromLakeToSQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CopyFromBlobToLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyFromLakeToSQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ArchiveProcessedFiles",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CopyFromLakeToSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ArchiveProcessedFiles_RawMovies",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-02T14:35:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFromBlobToLake_noForEach')]",
				"[concat(variables('factoryId'), '/pipelines/CopyFromLakeToSQL')]",
				"[concat(variables('factoryId'), '/pipelines/ArchiveProcessedFiles_RawMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaterForCopyDataOnline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 7",
				"activities": [
					{
						"name": "CopyFromLakeToAzureSQL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CopyJsonFromBlobToLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyFromLakeToAzureSQL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ArchiveProcessedFiles_RawOnline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CopyFromLakeToAzureSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ArchiveProcessedFiles_RawOnline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CopyJsonFromBlobToLake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyJsonFromBlobToLake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-02T16:58:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFromLakeToAzureSQL')]",
				"[concat(variables('factoryId'), '/pipelines/ArchiveProcessedFiles_RawOnline')]",
				"[concat(variables('factoryId'), '/pipelines/CopyJsonFromBlobToLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Metadata-driven_BOTTOM_LEVEL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 9",
				"activities": [
					{
						"name": "CopyDataWithParameters",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetDataFromConnectionTable",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetSDTCopyActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": {
											"value": "@concat(replace(pipeline().parameters.SourceObjectName, '.csv', ''), '_', utcnow('yyyy-MM-dd_HH-mm-ss'), '.csv')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@pipeline().parameters.SourceObjectName",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "@concat('TRUNCATE TABLE ', pipeline().parameters.SinkSchemaName, '.', pipeline().parameters.SinkTableName)\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"value": "@json(pipeline().parameters.Mapping)",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "DataLake_raw_metadatadriven",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@activity('GetDataFromConnectionTable').output.value[1].ContainerName\n",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@activity('GetDataFromConnectionTable').output.value[1].FolderPath",
										"type": "Expression"
									},
									"ColumnDelimiter": {
										"value": "@pipeline().parameters.ColumnDelimiter",
										"type": "Expression"
									},
									"NullValue": {
										"value": "@pipeline().parameters.NullValue",
										"type": "Expression"
									},
									"Mapping": {
										"value": "@pipeline().parameters.Mapping",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_Movies",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": {
										"value": "@pipeline().parameters.SinkSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.SinkTableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "GetDataFromConnectionTable",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetSDTLookupConnection",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * \n\tFROM metadata.ConnectionControlTable\n\tORDER BY ConnName",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Azure_SQL_Movies_metadata_ConnectionControlTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RunUpdateMainControlTableSP",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyDataWithParameters",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetSDTStoredProc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[metadata].[UpdateMainControlTable]",
							"storedProcedureParameters": {
								"SourceObjectName": {
									"value": {
										"value": "@pipeline().parameters.SourceObjectName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SinkSchemaName": {
									"value": {
										"value": "@pipeline().parameters.SinkSchemaName",
										"type": "Expression"
									},
									"type": "String"
								},
								"SinkTableName": {
									"value": {
										"value": "@pipeline().parameters.SinkSchemaName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "mentoring_azure_sql_server_movies_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "RunLogging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunUpdateMainControlTableSP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[metadata].[UpdateLogsTable]",
							"storedProcedureParameters": {
								"BOTTOMPipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"BOTTOMPipelineId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"SDTLookupMain": {
									"value": {
										"value": "@formatDateTime(pipeline().parameters.SDTLookupMain,'yyyy-MM-dd HH:mm:ss')\n",
										"type": "Expression"
									},
									"type": "String"
								},
								"EDTLookupMain": {
									"value": {
										"value": "@formatDateTime(pipeline().parameters.EDTLookupMain,'yyyy-MM-dd HH:mm:ss')\n",
										"type": "Expression"
									},
									"type": "String"
								},
								"SDTLookupConnection": {
									"value": {
										"value": "@formatDateTime(variables('SDTLookupConnection'),'yyyy-MM-dd HH:mm:ss')\n",
										"type": "Expression"
									},
									"type": "String"
								},
								"EDTLookupConnection": {
									"value": {
										"value": "@formatDateTime(variables('EDTLookupConnection'),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"SDTCopyActivity": {
									"value": {
										"value": "@formatDateTime(variables('SDTCopyActivity'),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EDTCopyActivity": {
									"value": {
										"value": "@formatDateTime(variables('EDTCopyActivity'),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"SDTStoredProc": {
									"value": {
										"value": "@formatDateTime(variables('SDTStoredProc'),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EDTStoredProc": {
									"value": {
										"value": "@formatDateTime(variables('EDTStoredProc'),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFromMainControlTable": {
									"value": {
										"value": "@string(pipeline().parameters.DataFromMainControlTable)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFromConnectionControlTable": {
									"value": {
										"value": "@string(activity('GetDataFromConnectionTable').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFromCopyActivity": {
									"value": {
										"value": "@string(activity('CopyDataWithParameters').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFromStoredProcedure": {
									"value": {
										"value": "@string(activity('RunUpdateMainControlTableSP').output)",
										"type": "Expression"
									},
									"type": "String"
								},
								"TOPPipelineName": {
									"value": {
										"value": "@pipeline().parameters.TOPPipelineName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TOPPipelineId": {
									"value": {
										"value": "@pipeline().parameters.TOPPipelineId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "mentoring_azure_sql_server_movies_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetSDTLookupConnection",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "SDTLookupConnection",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetEDTLookupConnection",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetDataFromConnectionTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "EDTLookupConnection",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetSDTCopyActivity",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "SDTCopyActivity",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetEDTCopyActivity",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "CopyDataWithParameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "EDTCopyActivity",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetSDTStoredProc",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "SDTStoredProc",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetEDTStoredProc",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "RunUpdateMainControlTableSP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "EDTStoredProc",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunErrorLoggingConnectionTable",
						"description": "",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "GetDataFromConnectionTable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[metadata].[UpdateErrorsTable]",
							"storedProcedureParameters": {
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('GetDataFromConnectionTable').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@activity('GetDataFromConnectionTable').error.failureType",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorMessage": {
									"value": {
										"value": "@activity('GetDataFromConnectionTable').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ActivityName": {
									"value": {
										"value": "'GetDataFromConnectionTable'",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "mentoring_azure_sql_server_movies_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "RunErrorLoggingCopyActivity",
						"description": "",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyDataWithParameters",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[metadata].[UpdateErrorsTable]",
							"storedProcedureParameters": {
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('CopyDataWithParameters').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@activity('CopyDataWithParameters').error.failureType",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorMessage": {
									"value": {
										"value": "@activity('CopyDataWithParameters').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ActivityName": {
									"value": {
										"value": "'CopyDataWithParameters'",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "mentoring_azure_sql_server_movies_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "RunErrorLoggingSP",
						"description": "",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RunUpdateMainControlTableSP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[metadata].[UpdateErrorsTable]",
							"storedProcedureParameters": {
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('RunUpdateMainControlTableSP').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@activity('RunUpdateMainControlTableSP').error.failureType",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorMessage": {
									"value": {
										"value": "@activity('RunUpdateMainControlTableSP').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ActivityName": {
									"value": "'CopyDataWithParameters'",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "mentoring_azure_sql_server_movies_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PostOnFail_copy2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "RunErrorLoggingConnectionTable",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@pipeline().parameters.logicAppUrl",
								"type": "Expression"
							},
							"body": {
								"message": "This is a custom dynamic message from your pipeline with factory name @{pipeline().DataFactory}, run ID @{pipeline().RunId}, and fail reason: @{activity('GetDataFromConnectionTable').error.message}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}",
								"status": "Fail"
							}
						}
					},
					{
						"name": "PostOnFail_copy3",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "RunErrorLoggingCopyActivity",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@pipeline().parameters.logicAppUrl",
								"type": "Expression"
							},
							"body": {
								"message": "This is a custom dynamic message from your pipeline with factory name @{pipeline().DataFactory}, run ID @{pipeline().RunId}, and fail reason: @{activity('CopyDataWithParameters').error.message}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}",
								"status": "Fail"
							}
						}
					},
					{
						"name": "PostOnFail_copy4",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "RunErrorLoggingSP",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@pipeline().parameters.logicAppUrl",
								"type": "Expression"
							},
							"body": {
								"message": "This is a custom dynamic message from your pipeline with factory name @{pipeline().DataFactory}, run ID @{pipeline().RunId}, and fail reason: @{activity('RunUpdateMainControlTableSP').error.message}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}",
								"status": "Fail"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceObjectName": {
						"type": "string"
					},
					"SinkSchemaName": {
						"type": "string"
					},
					"SinkTableName": {
						"type": "string"
					},
					"SourceConnName": {
						"type": "string"
					},
					"SinkConnName": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"NullValue": {
						"type": "string"
					},
					"Mapping": {
						"type": "string"
					},
					"SDTLookupMain": {
						"type": "string"
					},
					"EDTLookupMain": {
						"type": "string"
					},
					"DataFromMainControlTable": {
						"type": "string"
					},
					"TOPPipelineName": {
						"type": "string"
					},
					"TOPPipelineId": {
						"type": "string"
					},
					"receiver": {
						"type": "string"
					},
					"logicAppUrl": {
						"type": "string"
					}
				},
				"variables": {
					"SDTLookupConnection": {
						"type": "String"
					},
					"EDTLookupConnection": {
						"type": "String"
					},
					"SDTCopyActivity": {
						"type": "String"
					},
					"EDTCopyActivity": {
						"type": "String"
					},
					"SDTStoredProc": {
						"type": "String"
					},
					"EDTStoredProc": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Metadata-driven"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-26T12:37:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataLake_raw_metadatadriven')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_metadata_ConnectionControlTable')]",
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Metadata-driven_TOP_LEVEL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 9",
				"activities": [
					{
						"name": "GetDataFromMainControlTable",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetSDTForLookupMain",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM metadata.MainControlTable WHERE IsActives = 1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Azure_SQL_Movies_metadata_MainControlTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CallBottomLevelPipelineWithParameters",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetDataFromMainControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetDataFromMainControlTable').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Metadata-driven_BOTTOM_LEVEL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Metadata-driven_BOTTOM_LEVEL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceObjectName": {
												"value": "@item().SourceObjectName",
												"type": "Expression"
											},
											"SinkSchemaName": {
												"value": "@item().SinkSchemaName",
												"type": "Expression"
											},
											"SinkTableName": {
												"value": "@item().SinkTableName",
												"type": "Expression"
											},
											"SourceConnName": {
												"value": "@item().SourceConnName",
												"type": "Expression"
											},
											"SinkConnName": {
												"value": "@item().SinkConnName",
												"type": "Expression"
											},
											"ColumnDelimiter": {
												"value": "@item().ColumnDelimiter",
												"type": "Expression"
											},
											"NullValue": {
												"value": "@item().NullValue",
												"type": "Expression"
											},
											"Mapping": {
												"value": "@item().Mapping",
												"type": "Expression"
											},
											"SDTLookupMain": {
												"value": "@variables('SDTLookupMain')",
												"type": "Expression"
											},
											"EDTLookupMain": {
												"value": "@variables('EDTLookupMain')",
												"type": "Expression"
											},
											"DataFromMainControlTable": {
												"value": "@activity('GetDataFromMainControlTable').output",
												"type": "Expression"
											},
											"TOPPipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"TOPPipelineId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"receiver": {
												"value": "@pipeline().parameters.receiver",
												"type": "Expression"
											},
											"logicAppUrl": {
												"value": "@activity('GetLogicAppUrl').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "SetSDTForLookupMain",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetLogicAppUrl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "SDTLookupMain",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetEDTLookupMain",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetDataFromMainControlTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "EDTLookupMain",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RunErrorLoggingMainTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "GetDataFromMainControlTable",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[metadata].[UpdateErrorsTable]",
							"storedProcedureParameters": {
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('GetDataFromMainControlTable').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@activity('GetDataFromMainControlTable').error.failureType",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorMessage": {
									"value": {
										"value": "@activity('GetDataFromMainControlTable').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ActivityName": {
									"value": {
										"value": "'GetDataFromMainControlTable'",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "mentoring_azure_sql_server_movies_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "RunErrorLoggingForEach",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CallBottomLevelPipelineWithParameters",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[metadata].[UpdateErrorsTable]",
							"storedProcedureParameters": {
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('CallBottomLevelPipelineWithParameters').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@activity('CallBottomLevelPipelineWithParameters').error.failureType",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorMessage": {
									"value": {
										"value": "@activity('CallBottomLevelPipelineWithParameters').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ActivityName": {
									"value": {
										"value": "'CallBottomLevelPipelineWithParameters'",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "mentoring_azure_sql_server_movies_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PostOnSuccess",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CallBottomLevelPipelineWithParameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@activity('GetLogicAppUrl').output.value",
								"type": "Expression"
							},
							"body": {
								"message": "This is a custom dynamic message from your pipeline with factory name @{pipeline().DataFactory}, run ID @{pipeline().RunId}.",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}",
								"status": "Success"
							}
						}
					},
					{
						"name": "PostOnFail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "RunErrorLoggingForEach",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@activity('GetLogicAppUrl').output.value",
								"type": "Expression"
							},
							"body": {
								"message": "This is a custom dynamic message from your pipeline with factory name @{pipeline().DataFactory}, run ID @{pipeline().RunId}, and fail reason: @{activity('CallBottomLevelPipelineWithParameters').error.message}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}",
								"status": "Fail"
							}
						}
					},
					{
						"name": "PostOnFail_copy1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "RunErrorLoggingMainTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@activity('GetLogicAppUrl').output.value",
								"type": "Expression"
							},
							"body": {
								"message": "This is a custom dynamic message from your pipeline with factory name @{pipeline().DataFactory}, run ID @{pipeline().RunId}, and fail reason: @{activity('GetDataFromMainControlTable').error.message}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}",
								"status": "Fail"
							}
						}
					},
					{
						"name": "GetLogicAppUrl",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@pipeline().globalParameters.logic_app_secret_url",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "kseniia_pestova@epam.com"
					}
				},
				"variables": {
					"SDTLookupMain": {
						"type": "String"
					},
					"EDTLookupMain": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Metadata-driven"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-26T12:37:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_metadata_MainControlTable')]",
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]",
				"[concat(variables('factoryId'), '/pipelines/Metadata-driven_BOTTOM_LEVEL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewPipelineInFetureBranch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 12",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_DataMart_dbo_DimMovie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_DataMart_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatus",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimMovie"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_DataMart_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_DataMart_dbo_DimOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_DataMart_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_DataMart_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_DataMart_dbo_FactOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_DataMart_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_DataMart_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_DataMart_dbo_FactOnlinePurchase_MonthlySnapshot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_DataMart_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MonthKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PurchaseAmount",
						"type": "decimal",
						"precision": 10,
						"scale": 1
					},
					{
						"name": "PurchaseQuantity",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase_MonthlySnapshot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_DataMart_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_DataMart_stg_tMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_DataMart_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Budget",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HomepagePath",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "OriginalTitle",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Revenue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AvgVote",
						"type": "decimal",
						"precision": 3,
						"scale": 1
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "tMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_DataMart_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_DataMart_stg_tOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_DataMart_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "tOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_DataMart_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_DataMart_stg_tOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_DataMart_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "tOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_DataMart_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_dbo_tMovieStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovieStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_dbo_tMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Budget",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HomepagePath",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "OriginalTitle",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Revenue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AvgVote",
						"type": "decimal",
						"precision": 3,
						"scale": 1
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_dbo_tOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_dbo_tOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_metadata_ConnectionControlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ConnName",
						"type": "varchar"
					},
					{
						"name": "ConnectionType",
						"type": "varchar"
					},
					{
						"name": "LinkedServiceName",
						"type": "varchar"
					},
					{
						"name": "ContainerName",
						"type": "varchar"
					},
					{
						"name": "FolderPath",
						"type": "varchar"
					},
					{
						"name": "ServerName",
						"type": "varchar"
					},
					{
						"name": "DatabaseName",
						"type": "varchar"
					},
					{
						"name": "UserName",
						"type": "varchar"
					},
					{
						"name": "KeyVaultSecretName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "metadata",
					"table": "ConnectionControlTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_metadata_MainControlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourceObjectName",
						"type": "varchar"
					},
					{
						"name": "SinkObjectName",
						"type": "varchar"
					},
					{
						"name": "SourceConnName",
						"type": "varchar"
					},
					{
						"name": "SinkConnName",
						"type": "varchar"
					},
					{
						"name": "IsActive",
						"type": "bit"
					},
					{
						"name": "LastCopiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "metadata",
					"table": "MainControlTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_metadata_WatermarkControl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "metadata",
					"table": "WatermarkControl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_stg_cinema_tickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cinema_code",
						"type": "nvarchar"
					},
					{
						"name": "cinema_name",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "cinema_tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_stg_credits')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "credits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_stg_movies_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "movies_metadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_stg_online_purchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "online_purchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Movies_stg_ratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_azure_sql_server_movies_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "ratings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_azure_sql_server_movies_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobAUS_Ratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_blob_au_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "ratings"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_blob_au_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobForEach')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_blob_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_blob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_Movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_blob_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_blob_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_Online')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 7",
				"linkedServiceName": {
					"referenceName": "mentoring_blob_online_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"serviceName": {
							"type": "string"
						},
						"serviceCode": {
							"type": "string"
						},
						"movieId": {
							"type": "integer"
						},
						"userId": {
							"type": "integer"
						},
						"price": {
							"type": "string"
						},
						"transaction": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"datetime": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_blob_online_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakeForEach')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_datalake_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_datalake_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLake_RawMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_datalake_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_datalake_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLake_RawMoviesArchive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_datalake_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies/archive",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_datalake_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLake_RawOnline')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 7",
				"linkedServiceName": {
					"referenceName": "mentoring_datalake_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_datalake_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLake_RawOnlineArchive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_datalake_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online/archive",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_datalake_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLake_RawRatings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_datalake_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ratings",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_datalake_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLake_raw_metadatadriven')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_datalake_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					},
					"ColumnDelimiter": {
						"type": "string"
					},
					"NullValue": {
						"type": "string"
					},
					"Mapping": {
						"type": "object"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ColumnDelimiter",
						"type": "Expression"
					},
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"nullValue": {
						"value": "@dataset().NullValue",
						"type": "Expression"
					},
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_datalake_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_wpg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_datalake_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_datalake_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_CimenaTickets_Tickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_sql_server_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CinemaCode",
						"type": "nvarchar"
					},
					{
						"name": "CinemaName",
						"type": "nvarchar"
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketPrice",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_sql_server_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_wpg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mentoring_blob_online_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"serviceName": {
							"type": "string"
						},
						"serviceCode": {
							"type": "string"
						},
						"movieId": {
							"type": "integer"
						},
						"userId": {
							"type": "integer"
						},
						"price": {
							"type": "string"
						},
						"transaction": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"datetime": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_blob_online_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mentoring_akv_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('mentoring_akv_ls_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mentoring_azure_sql_server_DataMart_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('mentoring_azure_sql_server_DataMart_ls_properties_typeProperties_server')]",
					"database": "[parameters('mentoring_azure_sql_server_DataMart_ls_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('mentoring_azure_sql_server_DataMart_ls_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "mentoring_akv_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "azure-sql-server-pass"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_akv_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mentoring_azure_sql_server_movies_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('mentoring_azure_sql_server_movies_ls_properties_typeProperties_server')]",
					"database": "[parameters('mentoring_azure_sql_server_movies_ls_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('mentoring_azure_sql_server_movies_ls_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "mentoring_akv_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "azure-sql-server-pass"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_akv_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mentoring_blob_au_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "mentoring_akv_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('mentoring_blob_au_ls_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_akv_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mentoring_blob_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "mentoring_akv_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('mentoring_blob_ls_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_akv_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mentoring_blob_online_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 7",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "mentoring_akv_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('mentoring_blob_online_ls_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/mentoring_akv_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mentoring_datalake_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('mentoring_datalake_ls_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mentoring_sql_server_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('mentoring_sql_server_ls_properties_typeProperties_server')]",
					"database": "[parameters('mentoring_sql_server_ls_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('mentoring_sql_server_ls_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "mentoring_akv_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "sql-server-pass"
					}
				},
				"connectVia": {
					"referenceName": "kseniias-computer-ir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/kseniias-computer-ir')]",
				"[concat(variables('factoryId'), '/linkedServices/mentoring_akv_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DailyCinemaAndCinemaTicketsPopulation')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-07-22T23:36:00",
						"timeZone": "Georgian Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-M8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "France Central",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureEastAustraliaIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/kseniias-computer-ir')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Populate_dboDimMovie')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 8",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Azure_SQL_Movies_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_Movies_dbo_tMovieStatus",
								"type": "DatasetReference"
							},
							"name": "tMovieStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						}
					],
					"transformations": [
						{
							"name": "AddMovieStatusCreatedDateModifiedDate"
						},
						{
							"name": "tMoviesAndtMovieStatus"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovieStatus",
						"tMoviesAndtMovieStatus derive(MovieStatus = MovieStatusName,",
						"          CreatedDate = currentUTC(),",
						"          ModifiedDate = currentUTC()) ~> AddMovieStatusCreatedDateModifiedDate",
						"tMovies, tMovieStatus join(tMovies@MovieStatusId == tMovieStatus@MovieStatusId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> tMoviesAndtMovieStatus",
						"AddMovieStatusCreatedDateModifiedDate sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK,",
						"          Title,",
						"          ReleaseDate,",
						"          Runtime,",
						"          MovieStatus,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimMovie"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tMovieStatus')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_dbo_DimMovie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Populate_dboDimOnlineService')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 8",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Azure_SQL_Movies_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "AddCreatedDateModifiedDate"
						},
						{
							"name": "combineSourceAndSink"
						},
						{
							"name": "ConditionsToUpdateInsert"
						},
						{
							"name": "findDelta"
						},
						{
							"name": "findNotNullServiceCode"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"findDelta derive(CreatedDate = iif(isNull(DimOnlineService@ServiceCode) == true(), currentUTC(), DimOnlineService@CreatedDate),",
						"          ModifiedDate = iif(or(DimOnlineService@ServiceName != tOnlineService@ServiceName, isNull(DimOnlineService@ServiceCode) == true()), currentUTC(), DimOnlineService@ModifiedDate)) ~> AddCreatedDateModifiedDate",
						"tOnlineService, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> combineSourceAndSink",
						"AddCreatedDateModifiedDate alterRow(insertIf(isNull(DimOnlineService@ServiceCode)==true()),",
						"     updateIf(DimOnlineService@ServiceName!=tOnlineService@ServiceName),",
						"     deleteIf(isNull(tOnlineService@ServiceCode)==true())) ~> ConditionsToUpdateInsert",
						"combineSourceAndSink filter(or(or(isNull(tOnlineService@ServiceCode) == true(), isNull(DimOnlineService@ServiceCode) == true()), tOnlineService@ServiceName != DimOnlineService@ServiceName)) ~> findDelta",
						"ConditionsToUpdateInsert derive(ServiceCode = coalesce(tOnlineService@ServiceCode, DimOnlineService@ServiceCode)) ~> findNotNullServiceCode",
						"findNotNullServiceCode sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ServiceCode'],",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode,",
						"          ServiceName = tOnlineService@ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_dbo_DimOnlineService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Populate_dboFactOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 8",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Azure_SQL_Movies_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_Movies_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_Movies_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "joinOnlinePurchaseANDMovies"
						},
						{
							"name": "joinOnlineService"
						},
						{
							"name": "joinDimMovies"
						},
						{
							"name": "joinDimOnlineService"
						},
						{
							"name": "TransactionDateFormatting"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchase",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"tOnlinePurchase, tMovies join(tOnlinePurchase@MovieId == tMovies@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlinePurchaseANDMovies",
						"joinOnlinePurchaseANDMovies, tOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlineService",
						"joinOnlineService, DimMovie join(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimMovies",
						"joinDimMovies, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimOnlineService",
						"joinDimOnlineService derive(TransactionDate = toInteger(toString(TransactionDate, 'yyyyMMdd'))) ~> TransactionDateFormatting",
						"TransactionDateFormatting sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = TransactionDate,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_dbo_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_dbo_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_dbo_FactOnlinePurchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Populate_dboFactOnlinePurchaseANDMonthly')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 8",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Azure_SQL_Movies_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_Movies_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_Movies_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseMonthlySnapshot"
						}
					],
					"transformations": [
						{
							"name": "joinOnlinePurchaseANDOnlineService"
						},
						{
							"name": "joinDimOnlineService"
						},
						{
							"name": "joinMovies"
						},
						{
							"name": "joinDimMovie",
							"description": "Inner join on 'joinMovies' and 'DimOnlineService'q"
						},
						{
							"name": "TransactionDateWithMonth"
						},
						{
							"name": "TransactionDateWithDay"
						},
						{
							"name": "countTransactions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchase",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"tOnlinePurchase, tOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlinePurchaseANDOnlineService",
						"joinOnlinePurchaseANDOnlineService, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimOnlineService",
						"joinDimOnlineService, tMovies join(tOnlinePurchase@MovieId == tMovies@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovies",
						"joinMovies, DimMovie join(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimMovie",
						"joinDimOnlineService derive(TransactionDate = toInteger(toString(TransactionDate, 'yyyyMM'))) ~> TransactionDateWithMonth",
						"joinDimMovie derive(TransactionDate = toInteger(toString(TransactionDate, 'yyyyMMdd'))) ~> TransactionDateWithDay",
						"TransactionDateWithMonth aggregate(groupBy(TransactionDate,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = toInteger(count(TransactionId))) ~> countTransactions",
						"TransactionDateWithDay sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = TransactionDate,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> FactOnlinePurchase",
						"countTransactions sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey = TransactionDate,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> FactOnlinePurchaseMonthlySnapshot"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_dbo_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_dbo_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_dbo_FactOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_dbo_FactOnlinePurchase_MonthlySnapshot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Populate_dboFactOnlinePurchase_MonthlySnapshot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Module 8",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Azure_SQL_Movies_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_Movies_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Azure_SQL_DataMart_dbo_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "joinOnlineService"
						},
						{
							"name": "joinDimOnlineService"
						},
						{
							"name": "countTransactions"
						},
						{
							"name": "TransactionDateFormatting"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchase",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"tOnlinePurchase, tOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlineService",
						"joinOnlineService, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimOnlineService",
						"TransactionDateFormatting aggregate(groupBy(ServiceKey,",
						"          TransactionDate),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = toInteger(count(TransactionId))) ~> countTransactions",
						"joinDimOnlineService derive(TransactionDate = toInteger(toString(TransactionDate, 'yyyyMM'))) ~> TransactionDateFormatting",
						"countTransactions sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey = TransactionDate,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_dbo_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Movies_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_DataMart_dbo_FactOnlinePurchase_MonthlySnapshot')]"
			]
		}
	]
}